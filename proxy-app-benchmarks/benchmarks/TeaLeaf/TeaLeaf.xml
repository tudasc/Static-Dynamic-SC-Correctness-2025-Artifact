<?xml version="1.0" encoding="UTF-8"?>
<jube>  
  <include-path>
    <path>../../common</path>
    <path>../../platform/CLAIX-23</path>
  </include-path>

  <benchmark name="TeaLeaf" outpath="TeaLeaf.benchmarks">
    <!-- 
      #Lulesh Configuration 
    -->     
    <parameterset name="config">
      <parameter name="num_cells">2000</parameter>
      <parameter name="end_step">10</parameter>
    </parameterset>    
    <!-- 
      source directory 
    -->  
    <parameterset name="source"  init_with="defaults.xml">
      <parameter name="path_to_source" type="string">${jube_benchmark_home}/TeaLeaf/</parameter> <!-- - - - - - - - - - -  Path to the source folder       -->  
    </parameterset> 
    <!--
      #Fetching system settings       
      #Here you can add or change parameters to fit this specific benchmark
    -->
    <parameterset name="platform_specs_pset" init_with="system_settings.xml">  
      <parameter name="application_tasks" type="int">48,96,192</parameter>       <!-- - - - - - - - - - - - - - - - -  tasks has to be N^3           -->
      <parameter name="threads" type="int">1</parameter>   <!-- - - - - - - - - - - - - - - - -  Threads                       -->
      <parameter name="taskspernode" type="int">48</parameter> <!-- - - - - - - - - - - - - - - - -  Tasks per node           -->
      <parameter name="timelimit">00:30:00</parameter>
      <!-- <parameter name="args_exec"></parameter> -->
      <!-- Hack to inject postprocessing without using postprocess parameter -->
      <parameter name="args_exec">; echo "Total Wallclock: $(grep 'Wallclock:' job.out | tail -n 1 | cut -d: -f2)"</parameter>
    </parameterset>    
    <parameterset name="execute_pset" init_with="system_settings.xml"></parameterset>  
    <parameterset name="toolchain_env_pset" init_with="system_settings.xml">
        <!-- <parameter name="compiler_name">clang</parameter>      - - - - - - - - - - - - - - - -  Compiler               -->
        <!-- <parameter name="compiler_version">13.0.1</parameter>  - - - - - - - - - - - - - - - -  Compiler Version       -->
        <!-- <parameter name="mpi_name">openmpi</parameter>         - - - - - - - - - - - - - - - -  MPI                    -->
        <!-- <parameter name="mpi_version">2022a</parameter>        - - - - - - - - - - - - - - - -  MPI Version            -->
    </parameterset>
    <parameterset name="compile_pset" init_with="system_settings.xml">
      <parameter name="executable_name">serial-tealeaf</parameter> <!-- - - - - - - - - - -  Name of the executable       --> 
      <!-- Change folder before compilation -->
      <parameter name="compile_preparation" type="string">cd MPIRMA/${kernel_folder}</parameter> <!-- - - - - - - -  commands that have to be executed before compilation -->
      <parameter name="compile_target" type="string">$executable_name</parameter> <!-- - - - - - - -  Makefile target for compilation -->
      <!-- RMA is used by default -->
      <!-- <parameter name="RMA_target" type="string" mode="python">"-DUSE_RMA=1"</parameter> -->
      <parameter name="compile_env_vars" separator="!NONE!" mode="python" update_mode="use"> <!-- Environment variables for compilation with tsan -->
        {"base": "",
         "tsan": "CXX='${MUSTCXX}' CFLAGS='${compile_flags}' CXXFLAGS='${compile_flags}'",
         "tsan-opt": "CXX='${MUSTCXX}' CFLAGS='${compile_flags}' CXXFLAGS='${compile_flags}'",
         "tsan-cover": "CXX='${MUSTCXX}' CFLAGS='${compile_flags}' CXXFLAGS='${compile_flags}'",
         }.get("${compile_mode}", 0)
      </parameter> 
    </parameterset>
    <parameterset name="module_env_pset" init_with="system_settings.xml"></parameterset>
    <parameterset name="mpirun_env_pset" init_with="system_settings.xml"></parameterset>
    <parameterset name="export_env_pset" init_with="system_settings.xml"></parameterset>

    <!-- CoVeR parametersets -->
    <parameterset name="cover_config_pset" init_with="cover.xml"></parameterset>
    <parameterset name="cover_build_pset" init_with="cover.xml"></parameterset>
    <parameterset name="cover_compile_pset" init_with="cover.xml"></parameterset>
    <parameterset name="cover_execute_pset" init_with="cover.xml"></parameterset>
    <include from="cover.xml" path="fileset" />

    <!-- MUST parametersets -->
    <parameterset name="must_config_pset" init_with="must.xml"></parameterset>
    <parameterset name="must_build_pset" init_with="must.xml"></parameterset>
    <parameterset name="must_compile_pset" init_with="must.xml"></parameterset>
    <parameterset name="must_execute_pset" init_with="must.xml"></parameterset>

    <!-- PARCOACH parametersets -->
    <parameterset name="parcoach_config_pset" init_with="parcoach.xml" tag="parcoach"></parameterset>
    <parameterset name="parcoach_build_pset" init_with="parcoach.xml" tag="parcoach"></parameterset>
    <parameterset name="parcoach_compile_pset" init_with="parcoach.xml" tag="parcoach"></parameterset>
    <parameterset name="parcoach_execute_pset" init_with="parcoach.xml" tag="parcoach"></parameterset>

    <!-- Regex patternsets -->
    <patternset name="pattern" init_with="defaults.xml:pattern">
      <pattern name="time" type="float">Total Wallclock:\s*${jube_pat_fp}s</pattern>
    </patternset>
    <include from="cover.xml" path="patternset" />

    <!-- Load filesets -->
    <fileset name="source_files" init_with="system_settings.xml"></fileset>
    <fileset name="job_files" init_with="system_settings.xml"></fileset> <!-- Slurm -->
    <!-- Load substituteset -->
    <substituteset name="job_sub" init_with="system_settings.xml"></substituteset> <!-- Slurm -->
    <!-- Load steps -->
    <include from="cover.xml" path="step" /> <!-- CoVeR -->
    <include from="must.xml" path="step" /> <!-- Must -->
    <include from="parcoach.xml" path="step" tag="parcoach"/> <!-- Parcoach -->
    <include from="defaults.xml" path="step" />


    <step name="compile_cover" depend="copy_source">
      <use>compile_pset</use>
      <use>toolchain_env_pset</use>
      <use>module_env_pset</use>
      <use>export_env_pset</use>
      <use>cover_config_pset</use>
      <use>cover_fset</use>
      <!-- Compile executable -->
      <do>
        ${load_modules}; 
        ${export}; 
        ${compile_export};
        <!-- COMPILE INSTRUCTIONS START -->
        rm -r -f build
        mkdir build
        cd build
        CC="${COVER_CC} -include ${cover_install_folder}/include/mpi_contracts.h" CXX="${COVER_CXX} -include ${cover_install_folder}/include/mpi_contracts.h" cmake -DCMAKE_BUILD_TYPE=Debug -DMODEL=serial -DENABLE_MPI=ON ../copy_source/
        make clean;
        ${time_measure_command} make;
        <!-- COMPILE INSTRUCTIONS END --> 
        mv ${executable_name} ${jube_wp_abspath}/${executable_full_name}
        cp contract_messages.json ${jube_wp_abspath}
      </do>
      <do>python cover_statistics.py contract_messages.json</do>
    </step>
    
    <!-- Compile step -->
    <step name="compile" depend="copy_source,compile_cover" suffix="${compile_mode}" procs="1">
      <include from="defaults.xml" path="compile_psets/use" />
      <!-- Compile executable -->
      <do>
        echo "${compile_mode}";
        echo "${compile_common_env_vars}";
        echo "${export}";
        ${load_modules}; 
        ${export}; 
        ${compile_export};
        <!-- COMPILE INSTRUCTIONS START -->
        rm -r -f build
        mkdir build
        cd build
        CC="$MPICC" CXX="$MPICXX" cmake -DCMAKE_BUILD_TYPE=Debug -DMODEL=serial -DENABLE_MPI=ON ../copy_source/
        make clean;
        ${time_measure_command} make;
        <!-- COMPILE INSTRUCTIONS END --> 
        mv ${executable_name} ${jube_wp_abspath}/${executable_full_name};
      </do>
    </step>

    <!-- Substitution -->
    <substituteset name="tealeaf_execute_sub">
      <iofile in="tea.in.in" out="tea.in"/> 
      <sub source="#X_CELLS#" dest="${num_cells}"/>
      <sub source="#Y_CELLS#" dest="${num_cells}"/>
      <sub source="#END_STEP#" dest="${end_step}"/>
    </substituteset>

     <!-- Files -->
    <fileset name="tealeaf_files">
      <copy>${jube_benchmark_home}/tea.in.in</copy>
    </fileset>

    <!-- Execute step -->
    <step name="execute" depend="compile" suffix="${compile_mode}_${measurement_mode}" active="not ${ignorelist}" iterations="3">
      <include from="defaults.xml" path="execute_psets/use" />
      <use>tealeaf_files</use>
      <use>tealeaf_execute_sub</use>
      <do done_file="${done_file}" error_file="${error_file}">
        cp compile/copy_source/tea.problems tea.problems;
        $submit $submit_script
      </do>
    </step>
    <!-- Load analyser -->
    <include from="defaults.xml" path="analyser"/>
    <include from="cover.xml" path="analyser"/>

    <!-- Load CoVer result -->
    <include from="cover.xml" path="result"/>

    <result>
      <use>analyse</use>
      <table name="result_csv" style="csv" separator=";" sort="tasks,compile_mode,measurement_mode,jube_wp_id">
        <include from="defaults.xml" path="columns/column" />
        <column>num_cells</column>
        <column>end_step</column>
        <column>time_avg</column>
        <column>time_std</column>
        <column title="memory total (MiB)" tag="memusage" format=".3f">memory_total</column>
        <column>verification</column>
      </table>
      <table name="result" style="pretty" sort="tasks,compile_mode,measurement_mode,jube_wp_id">
        <include from="defaults.xml" path="columns/column" />
        <column>num_cells</column>
        <column>end_step</column>
        <column format=".3f">time_avg</column>
        <column format=".3f">time_std</column>
        <column title="memory total (MiB)" tag="memusage" format=".3f">memory_total</column>
        <column>verification</column>
      </table>
    </result>

    <!-- Use additional features -->
    <include from="includes.xml" path="includes/include"/>
  </benchmark>
</jube>
