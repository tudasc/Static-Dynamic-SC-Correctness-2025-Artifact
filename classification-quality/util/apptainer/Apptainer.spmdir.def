Bootstrap: docker
From: debian:trixie
Stage: base

%arguments
    DEBIAN_FRONTEND=noninteractive

%files
    requirements.txt /requirements.txt
    common.sh /common.sh
    shmem.sh /shmem.sh
    spmdir /spmdir
    time-wrapper.sh /usr/bin/time-wrapper
    tools/MUST_Static_Interop.zip /MUST.zip

%environment
    export VIRTUAL_ENV=/opt/venv
    export PATH="$VIRTUAL_ENV/bin:$PATH"

%post
    # Common installation of packages and MPI
    sh common.sh

    # Set env variables so we can compile our application
    export PATH=$OMPI_DIR/bin:$PATH
    export LD_LIBRARY_PATH=$OMPI_DIR/lib:$LD_LIBRARY_PATH

    # SHMEM installation
    sh shmem.sh

    apt-get update \
    && apt-get -y -qq --no-install-recommends install \
    zstd \
    unzip \
    libzstd-dev \
    clang-19 \
    libclang-rt-19-dev \
    libomp-19-dev \
    clang-format-19 \
    llvm-19 \
    llvm-19-dev \
    openjdk-25-jre openjdk-25-jdk

    # Ensure that LLVM 19 toolset is used
    ln -s /usr/bin/FileCheck-19 /usr/bin/FileCheck
    ln -s /usr/bin/clang-19 /usr/bin/clang
    ln -s /usr/bin/clang++-19 /usr/bin/clang++
    ln -s /usr/bin/clang-format-19 /usr/bin/clang-format
    ln -s $(which llvm-link-19) /usr/bin/llvm-link
    ln -s $(which opt-19) /usr/bin/opt
    ln -s $(which llc-19) /usr/bin/llc

    # Set Clang compiler as default and MPI compiler
    export CC=clang
    export CXX=clang++
    export OMPI_CC=clang
    export OMPI_CXX=clang++

    SPMDIR_LLVM_PROJECT=https://github.com/burakSemih/llvm-project.git
    SPMDIR_LLVM_BRANCH=spmd-ir-paper-eurompi-2025
    SPMDIR_GIT_DIR=/spmdir
    BUILD_DIR=build
    INSTALL_DIR=/opt/spmdir
    INSTALL_DIR_MUST=/opt/must # For hybrid

    # Install MUST
    unzip /MUST.zip && \
    cd MUST && \
    rm -rf .git && echo "v0.0.0" > .version && \
    rm -rf ./externals/GTI/.git && echo "v0.0.0" > ./externals/GTI/.version && \
    rm -rf ./externals/GTI/externals/PnMPI/.git && echo "v0.0.0" > ./externals/GTI/externals/PnMPI/.version && \
    mkdir -p ${BUILD_DIR}
    cmake -S . -B ${BUILD_DIR} \
    -DCMAKE_PREFIX_PATH='/usr/lib/llvm-19/;/usr/lib/;/usr/lib64/' \
    -DCMAKE_BUILD_TYPE=Release \
    -DENABLE_STACKTRACE=OFF \
    -DUSE_BACKWARD=OFF \
    -DENABLE_FORTRAN=OFF \
    -DENABLE_TYPEART=OFF \
    -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR_MUST}
    cmake --build ${BUILD_DIR} -- -j$(nproc --all) install
    cmake --build ${BUILD_DIR} -- -j$(nproc --all) install-prebuilds

    # Clean up build dir
    rm -r ${BUILD_DIR}

    cd /
    git clone --depth 1 --branch ${SPMDIR_LLVM_BRANCH} ${SPMDIR_LLVM_PROJECT}
    mkdir ${BUILD_DIR}
    cmake -G Ninja -S llvm-project/llvm -B ${BUILD_DIR} \
    -DCMAKE_BUILD_TYPE=Release \
    -DLLVM_TARGETS_TO_BUILD="host;NVPTX" \
    -DLLVM_ENABLE_PROJECTS="mlir;clang;openmp;lld;polly" \
    -DLLVM_EXTERNAL_PROJECTS=spmd-dialect \
    -DLLVM_EXTERNAL_SPMD_DIALECT_SOURCE_DIR=${SPMDIR_GIT_DIR} \
    -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
    -DLLVM_ENABLE_DUMP=ON \
    -DLLVM_ENABLE_LIBEDIT=OFF
    cmake --build ${BUILD_DIR} -- -j$(nproc --all) install

    # Clean up build dir
    rm -r ${BUILD_DIR}

    # Set build dir for proxy apps
    echo "export SPMDIR_BUILD='${INSTALL_DIR}'" >> $APPTAINER_ENVIRONMENT

    # Set PATH variable
    echo "export PATH='${INSTALL_DIR}/bin:${INSTALL_DIR_MUST}/bin:$PATH'" >> $APPTAINER_ENVIRONMENT

    # Clean up externals
    rm -rf /externals
