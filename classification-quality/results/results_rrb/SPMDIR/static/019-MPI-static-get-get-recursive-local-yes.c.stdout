

--------------------------------------------------------------------------------------------------------------
Static Verification of Data Races:
--------------------------------------------------------------------------------------------------------------

results-20250730-140308/SPMDIR/static/019-MPI-static-get-get-recursive-local-yes.c:14:5: warning: get operation/call may access the same memory as the previous operation without proper synch. (Data Race)
    MPI_Get(arr_base, 1, MPI_INT, 1, iteration, 1, MPI_INT, win);
    ^
results-20250730-140308/SPMDIR/static/019-MPI-static-get-get-recursive-local-yes.c:52:9: note: called from
        inefficient_get(0, arr_base, win);
        ^
results-20250730-140308/SPMDIR/static/019-MPI-static-get-get-recursive-local-yes.c:14:5: note: see current operation: %error_3 = "spmd.get"(%baseAddress, %c1_i64, %2, %c1_i64, %c1_i32, %win, %22, %c1_i64, %2, %c1_i64) <{isAtomic = true, isBlocking = false, usedModel = 0 : i32}> {spmd.executedBy = array<i32: 0>, spmd.executionKind = "Static"} : (!llvm.ptr, i64, !spmd.datatype, i64, i32, !spmd.win, i64, i64, !spmd.datatype, i64) -> !spmd.error
    MPI_Get(arr_base, 1, MPI_INT, 1, iteration, 1, MPI_INT, win);
    ^


Previous operation:

results-20250730-140308/SPMDIR/static/019-MPI-static-get-get-recursive-local-yes.c:14:5: warning: get operation/call
    MPI_Get(arr_base, 1, MPI_INT, 1, iteration, 1, MPI_INT, win);
    ^
results-20250730-140308/SPMDIR/static/019-MPI-static-get-get-recursive-local-yes.c:52:9: note: called from
        inefficient_get(0, arr_base, win);
        ^
results-20250730-140308/SPMDIR/static/019-MPI-static-get-get-recursive-local-yes.c:14:5: note: see current operation: %error_3 = "spmd.get"(%baseAddress, %c1_i64, %2, %c1_i64, %c1_i32, %win, %22, %c1_i64, %2, %c1_i64) <{isAtomic = true, isBlocking = false, usedModel = 0 : i32}> {spmd.executedBy = array<i32: 0>, spmd.executionKind = "Static"} : (!llvm.ptr, i64, !spmd.datatype, i64, i32, !spmd.win, i64, i64, !spmd.datatype, i64) -> !spmd.error
    MPI_Get(arr_base, 1, MPI_INT, 1, iteration, 1, MPI_INT, win);
    ^


With the alias values:
Causing Access on: %baseAddress
Previous Access on: %baseAddress


On the orignal value:
Operand: %baseAddress


Defined by:
results-20250730-140308/SPMDIR/static/019-MPI-static-get-get-recursive-local-yes.c:35:5: warning: winAlloc
    MPI_Win_allocate(ARR_SIZE * sizeof(int), sizeof(int), MPI_INFO_NULL, MPI_COMM_WORLD, &arr_base, &win);
    ^
results-20250730-140308/SPMDIR/static/019-MPI-static-get-get-recursive-local-yes.c:35:5: note: see current operation: %baseAddress, %win, %error_1 = "spmd.winAlloc"(%3, %c400_i64, %c4_i32) <{usedModel = 0 : i32}> {spmd.executionKind = "All"} : (!spmd.comm, i64, i32) -> (!llvm.ptr, !spmd.win, !spmd.error)

--------------------------------------------------------------------------------------------------------------



