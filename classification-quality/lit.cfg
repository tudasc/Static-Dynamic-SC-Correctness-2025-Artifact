# -*- Python -*- vim: set ft=python ts=4 sw=4 expandtab tw=79:
# Configuration file for the 'lit' test runner.

import os
import lit.formats
import lit.util
from lit.TestingConfig import TestingConfig

config: TestingConfig
envvars = {}

# Tell pylint that we know config and lit_config exist somewhere.
if 'PYLINT_IMPORT' in os.environ:
    config = object()
    lit_config = object()

loaded_site_cfg = getattr(config, "loaded_site_config", False)
if not loaded_site_cfg:
    site_cfg = lit_config.params.get("spmd_race_site_config", None)
    if site_cfg and os.path.exists(site_cfg):
        lit_config.load_config(config, site_cfg)
        raise SystemExit

print(f"loaded config {config.filecheck}")

# name: The name of this test suite.
config.name = 'RaceTests'

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.c', '.cpp', '.cu']

config.excludes = ['remote', 'NoSupport', 'GASPI',
                   'hybrid', 'deprecated',
                   'currentlyNotSupportedByNVSHMEM',
                   'notSupportedBySOS',
                   'util', "newTestCases", "proxyApps", "stash"]
config.excludes.extend([f'level{i}' for i in range(1,5)])

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root object directory where output is placed
#config.test_exec_root = config.builddir + "/tests"

# test format
config.test_format = lit.formats.ShTest()


# Environment variables that should be inherited
environment_allowlist = [
    "HOME",
]

config.forward_full_env = True

for envvar in os.environ:
    if config.forward_full_env:
        config.environment[envvar] = os.environ[envvar]
        continue
    if envvar in environment_allowlist:
        config.environment[envvar] = os.environ[envvar]
        continue

# Set default mustrun parameters
default_envvars = [
    ("SPMD_IR_EXITCODE", "0")
]

config.disable_remote = True
if config.disable_remote:
    config.available_features.add("disable-remote")

for k, v in default_envvars:
    if not os.environ.get(k):
        envvars[k] = v

# These must be added before the main %must-run substitution to have precedence over it. Otherwise the main one will
# replace the `%must-run` prefix.
config.substitutions.append(("%spmd-verify", f"%envvars bash {config.spmd_verify} check-dataRace"))

# Use a substitution such that these will appear in lit's test output.
envvar_string = " ".join(f"{key}=\"{value}\"" for key, value in envvars.items())
config.substitutions.append(("%envvars", f"env {envvar_string}"))

# Use tee to tap and save the MUST output passed to FileCheck. The file is
# written to the cmake build directory. It is placed in the directory
# corresponding to the source file as `<testsource_basename>.filecheck.in`.
filecheck_wiretap = f"tee {config.spmd_race_testdir}/%basename_t.filecheck.in | "
filecheck_cmd = (filecheck_wiretap
                 + config.filecheck
                 + " --dump-input always")

# The string given by GNU libc on a failing `assert` call
filecheck_cmd += " --implicit-check-not 'Assertion {{.*}} failed'"

check_prefixes = []

if check_prefixes:
    check_prefix_opt = "--allow-unused-prefixes --check-prefixes CHECK," + ",".join(check_prefixes)
else:
    check_prefix_opt = ""
config.substitutions.append(
    ("%check-prefixes", check_prefix_opt)
)
config.substitutions.append(
    ("%filecheck", filecheck_cmd)
)

#config.substitutions.append(("%must-bin-dir", config.must_bin_dir))
#config.substitutions.append(("%not", config.not_helper_script))
