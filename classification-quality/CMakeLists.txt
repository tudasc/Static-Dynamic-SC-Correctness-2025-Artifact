cmake_minimum_required(VERSION 3.20)

project(race-suite)

enable_testing()
#add_subdirectory(newTestCases)
#add_subdirectory(rmaracebench)

find_package(LLVM CONFIG)
if(NOT LLVM_FOUND)
  message(STATUS "LLVM not found at: ${LLVM_DIR}.")
  find_package(LLVM REQUIRED CONFIG)
endif()

option(SPMD_PATH "Path to spmd installation" "${LLVM_DIR}/bin")
option(NUM_TEST_WORKERS "Number of lit test workers (-j)" "4")

message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Found Clang ${Clang_DIR}")

# Not so portable, but suffices
find_program(SPMD_VERIFY
    NAMES spmd-verify spmd-verify.sh
    PATHS ${SPMD_PATH}
    NO_DEFAULT_PATH
)

message(STATUS "Path to LLVM installation is set to ${LLVM_DIR}")
message(STATUS "spmd verify is set to ${SPMD_VERIFY}")

macro(pythonize_bool truth_var var)
  if(${truth_var})
    set(${var} True)
  else()
    set(${var} False)
  endif()
endmacro()

function(find_llvm_progs target names)
  cmake_parse_arguments(ARG "ABORT_IF_MISSING;SHOW_VAR" "DEFAULT_EXE" "HINTS" ${ARGN})
  set(TARGET_TMP ${target})

  find_program(
    ${target}
    NAMES ${names}
    PATHS ${LLVM_TOOLS_BINARY_DIR}
    NO_DEFAULT_PATH
  )
  if(NOT ${target})
    find_program(
      ${target}
      NAMES ${names}
      HINTS ${ARG_HINTS}
    )
  endif()

  if(NOT ${target})
    set(target_missing_message "")
    if(ARG_DEFAULT_EXE)
      unset(${target} CACHE)
      set(${target}
          ${ARG_DEFAULT_EXE}
          CACHE
          STRING
          "Default value for ${TARGET_TMP}."
      )
      set(target_missing_message "Using default: ${ARG_DEFAULT_EXE}")
    endif()

    set(message_status STATUS)
    if(ARG_ABORT_IF_MISSING AND NOT ARG_DEFAULT_EXE)
      set(message_status SEND_ERROR)
    endif()
    message(${message_status}
      "Did not find LLVM program " "${names}"
      " in ${LLVM_TOOLS_BINARY_DIR}, in system path or hints " "\"${ARG_HINTS}\"" ". "
      ${target_missing_message}
    )
  endif()

  if(ARG_SHOW_VAR)
    mark_as_advanced(CLEAR ${target})
  else()
    mark_as_advanced(${target})
  endif()
endfunction()

find_llvm_progs(SPMD_RACE_FILECHECK_EXEC "FileCheck-${LLVM_VERSION_MAJOR};FileCheck" ABORT_IF_MISSING)

if(LLVM_EXTERNAL_LIT)
  cmake_path(GET LLVM_EXTERNAL_LIT PARENT_PATH LLVM_EXTERNAL_LIT_DIR)
endif()

find_llvm_progs(SPMD_RACE_LIT_EXEC
  "llvm-lit;lit;lit.py"
  HINTS ${LLVM_EXTERNAL_LIT_DIR} /usr/lib/llvm-${LLVM_VERSION_MAJOR} /usr/lib/llvm /usr/bin /usr/local/bin /opt/local/bin
  ABORT_IF_MISSING
)

function(configure_spmd_race_lit_site_cfg input output)
  set(LIT_SITE_CFG_IN_HEADER
      "## Autogenerated for spmd_race from ${input}\n## Do not edit!"
  )
  
  set(SPMD_RACE_PROJECT_DIR ${PROJECT_SOURCE_DIR})
  set(SPMD_RACE_BUILD_DIR ${CMAKE_BINARY_DIR})
  set(SPMD_RACE_TEST_DIR ${CMAKE_BINARY_DIR}/testsuite-exec)
  file(MAKE_DIRECTORY ${SPMD_RACE_TEST_DIR})
  #pythonize_bool(SPMD_RACE_WORKAROUND)

  file(READ ${input} contents)
  string(CONFIGURE "${contents}" contents @ONLY)
  file(GENERATE
    OUTPUT
      ${output}
    CONTENT
      "${contents}"
    FILE_PERMISSIONS
      OWNER_READ OWNER_WRITE OWNER_EXECUTE
      GROUP_READ
      WORLD_READ
  )
endfunction()

configure_spmd_race_lit_site_cfg(
  ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in
  ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg
)


function(spmd_race_add_lit_testsuite target comment)
  cmake_parse_arguments(ARG "" "" "PARAMS;DEPENDS;ARGS" ${ARGN})

  foreach(param ${ARG_PARAMS})
    list(APPEND TEST_PARAMS --param ${param})
  endforeach()

  add_custom_target(${target}
    COMMAND ${SPMD_RACE_LIT_EXEC} ${ARG_ARGS} ${TEST_PARAMS} ${ARG_UNPARSED_ARGUMENTS}
    COMMENT "${comment}"
    BYPRODUCTS ${TARGET_NAME} ${TARGET_NAME}
    USES_TERMINAL
  )

  if (ARG_DEPENDS)
    add_dependencies(${target} ${ARG_DEPENDS})
  endif()
endfunction()

function(add_lit_target)
  cmake_parse_arguments(ARG "" "" "SUITES" ${ARGN})

  foreach(suite IN LISTS ARG_SUITES)
    if("${suite}" STREQUAL "all")
      set(SUITE_PATH ${CMAKE_CURRENT_SOURCE_DIR})
      set(TARGET_NAME check-race)
    else()
      set(SUITE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${suite})
      set(TARGET_NAME check-race-${suite})
    endif()

    if(NOT EXISTS ${SUITE_PATH} AND NOT "${suite}" STREQUAL "staging")
      message(WARNING "Could not find suitable lit test target at ${SUITE_PATH}")
      continue()
    endif()

    spmd_race_add_lit_testsuite(${TARGET_NAME}
      "Running the lit suite spmd_race"
      ${SUITE_PATH}
      ARGS --workers 1 --time-tests --output "${TARGET_NAME}.out.json" --xunit-xml-output "${TARGET_NAME}.xunit.xml"
      PARAMS spmd_race_site_config=${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg
    )
  endforeach()
endfunction()

set(SPMD_RACE_SUITES
  all
  MBB
  RRB
  newTestCases
)

add_lit_target(SUITES ${SPMD_RACE_SUITES})

add_test(
  NAME race-lit-suite
  COMMAND
  ${SPMD_RACE_LIT_EXEC} -j ${NUM_TEST_WORKERS} --param
    spmd_race_site_config=${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg
    ${CMAKE_CURRENT_SOURCE_DIR}
)
