# https://github.com/RadeonOpenCompute/ROCm-docker/dev
FROM ubuntu:20.04
# LABEL maintainer=jgp@cscs.ch
# FROM nvidia/cuda:11.7.0-base-ubuntu22.04

# {{{ readme
# ubjg: 
#   cd /tmp2/JG/ascent/
#   # sudo docker build -f Dockerfile_hip_1 -t deleteme:latest .
# push to jfrog (buildah):
#   # check src dir
#   # scp jgpiccinal@86.50.167.34:...
#   salloc -N1 -C'gpu&contbuild' -A`id -gn` -t1:0:0
#   ssh $SLURM_NODELIST
#   module load daint-gpu Buildah/1.26.1
#
#   buildah bud --format=docker --tag sph-exa_base:hip -f Dockerfile_hip_1 .
#
#   # TODO stop using art.cscs.ch, use jfrog.svc.cscs.ch:
#   jfrog=jfrog.svc.cscs.ch/contbuild/testing/anfink/9590261141699040
#   buildah login -u $USER jfrog.svc.cscs.ch
#   #buildah pull $jfrog/sph-exa_base:hip
#   buildah push sph-exa_base:hip docker://$jfrog/sph-exa_base:hip
#   module load sarus
#   sarus pull --login $jfrog/sph-exa_base:hip
#   sarus run -t $jfrog/sph-exa_base:hip
#   # --> test with: hpctools.git/reframechecks/containers/reframe_ci.py
# push to dockerhub:
#   sudo docker login -u sphexa
#   sudo docker tag deleteme:latest sphexa/ascent:latest
#   sudo docker push sphexa/ascent:latest
# }}}

#{{{ variables:
ARG ROCM_VERSION=5.2.3
# https://repo.radeon.com/rocm/apt/
ARG AMDGPU_VERSION=22.20.3
# https://repo.radeon.com/amdgpu/
# ENV ROCM_VERSION '5.2.3'
# https://repo.radeon.com/rocm/apt/
# ENV AMDGPU_VERSION '22.20.3'
# https://repo.radeon.com/amdgpu/
ENV TZ 'Europe/Zurich'
ENV DEPS_PATH 'ftp://ftp.cscs.ch/out/jgp/hpc/containers'
#}}}

#{{{ apt:
# clang-12 libomp-12-dev \
RUN sed -i 's@archive.ubuntu.com@ubuntu.ethz.ch@' /etc/apt/sources.list \
    && apt update --quiet \
    && apt upgrade -y --quiet \
    && echo "## apt: ROCM_VERSION=$ROCM_VERSION AMDGPU_VERSION=$AMDGPU_VERSION" \
    && DEBIAN_FRONTEND=noninteractive \
       apt install -y --no-install-recommends \
       ca-certificates curl libnuma-dev gnupg \
    && curl -sL https://repo.radeon.com/rocm/rocm.gpg.key | apt-key add - \
    && printf "deb [arch=amd64] https://repo.radeon.com/rocm/apt/$ROCM_VERSION/ ubuntu main" | \
       tee /etc/apt/sources.list.d/rocm.list \
    && printf "deb [arch=amd64] https://repo.radeon.com/amdgpu/$AMDGPU_VERSION/ubuntu focal main" | \
       tee /etc/apt/sources.list.d/amdgpu.list \
    && apt update --quiet \
    && DEBIAN_FRONTEND=noninteractive \
       apt install -y --no-install-recommends \
       sudo \
       libelf1 \
       kmod \
       file \
       rocm-dev \
       rocm-libs \
       build-essential \
       libtbb-dev zlib1g-dev git file wget vim-tiny parallel \
       python3-pip libpython3-dev python3-numpy \
       python3-matplotlib pkg-config \
       rocthrust-dev libthrust-dev hipcub-dev \
       hipify-clang gcc-10 libstdc++-10-dev \
       mpich libhdf5-mpich-dev \
    && apt clean autoremove \
    && rm -rf /var/lib/apt/lists/*
# -python-is-python3
# mpich
# cuda-nvcc-11-7 libcublas-dev-11-7
#}}}

#{{{ src:
# wget https://github.com/Kitware/CMake/releases/download/v3.24.0/cmake-3.24.0-linux-x86_64.tar.gz
# wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.13/hdf5-1.13.2/src/hdf5-1.13.2.tar.bz2
# wget https://www.mpich.org/static/downloads/3.1.4/mpich-3.1.4.tar.gz
# wget https://github.com/google/googletest/archive/refs/tags/release-1.12.1.tar.gz
# COPY src/cmake-3.24.0-linux-x86_64.tar.gz /usr/local/games/
# COPY src/hdf5-1.13.2.tar.bz2 /usr/local/games/
# COPY src/mpich-3.1.4.tar.gz /usr/local/games/
# COPY src/release-1.12.1.tar.gz /usr/local/games/
# insitu:
# COPY src/ascent-v0.8.0-src-with-blt.tar.gz /usr/local/games/
# COPY src/conduit-v0.8.3-src-with-blt.tar.gz /usr/local/games/
# COPY src/v0.8.1.tar.gz /usr/local/games/
# COPY src/v1.7.1.tar.gz /usr/local/games/
# COPY src/v0.5.1.tar.gz /usr/local/games/
# = https://github.com/LLNL/blt/archive/refs/tags/v0.5.1.tar.gz
# TODO: glass.h5

RUN echo \
    && echo "## wget:" \
    && cd /usr/local/games \
    && wget --quiet $DEPS_PATH/c/CMake/cmake-3.24.0-linux-x86_64.tar.gz \
    && wget --quiet $DEPS_PATH/m/MPICH/mpich-3.1.4.tar.gz \
    && wget --quiet $DEPS_PATH/h/hdf5/hdf5-1.13.2.tar.bz2 \
    && wget --quiet $DEPS_PATH/g/googletest/release-1.12.1.tar.gz \
    && wget --quiet $DEPS_PATH/in/glass.h5
#}}}

#{{{ cmake:
RUN echo \
    && echo "## cmake:" \
    && export VV=3.24.0 VVshort=3.24 \
    && cd /usr/local/games \
    && tar xf cmake-$VV-linux-x86_64.tar.gz \
    && cp -a cmake-$VV-linux-x86_64/bin/* /usr/bin/ \
    && cp -a cmake-$VV-linux-x86_64/share/cmake-$VVshort /usr/share/cmake-$VVshort \
    && rm -fr cmake-$VV-linux-x86_64.tar.gz cmake-$VV-linux-x86_64/bin/cmake-gui
#}}}

# #{{{ #mpich:
# # RUN echo \
# #     && echo "## mpich:" \
# #     && cd /usr/local/games \
# #     && tar xf mpich-3.1.4.tar.gz \
# #     && cd mpich-3.1.4/ \
# #     && ./configure --prefix=/usr --enable-fortran=no > /dev/null \
# #     && make --quiet -j `grep processor /proc/cpuinfo | wc -l` install > /dev/null \
# #     && cd /usr/local/games \
# #     && rm -fr mpich-3.1.4 mpich-3.1.4.tar.gz \
# #     && ldconfig
# #}}}

# #{{{ #hdf5:
# RUN echo \
#     && echo "## hdf5:" \
#     && export VV=1.13.2 \
#     && cd /usr/local/games \
#     && tar xf hdf5-$VV.tar.bz2 \
#     && cmake \
#     -DCMAKE_C_COMPILER:STRING=mpicc \
#     -DCMAKE_C_FLAGS:STRING=-w \
#     -DONLY_SHARED_LIBS:BOOL=ON \
#     -DHDF5_BUILD_HL_LIB:BOOL=ON \
#     -DHDF5_ENABLE_Z_LIB_SUPPORT:BOOL=ON \
#     -DBUILD_SHARED_LIBS:BOOL=ON \
#     -DHDF5_ENABLE_PARALLEL:BOOL=ON \
#     -DHDF5_BUILD_TOOLS:BOOL=OFF \
#     -DBUILD_STATIC_LIBS=OFF \
#     -DHDF5_BUILD_EXAMPLES:BOOL=OFF \
#     -DBUILD_TESTING:BOOL=OFF \
#     -DHDF5_ENABLE_SZIP_SUPPORT:BOOL=OFF \
#     -DHDF5_ENABLE_SZIP_ENCODING:BOOL=OFF \
#     -DHDF5_ENABLE_THREADSAFE:BOOL=OFF \
#     -DHDF5_BUILD_CPP_LIB:BOOL=OFF \
#     -DHDF5_BUILD_FORTRAN:BOOL=OFF \
#     -DHDF5_BUILD_JAVA:BOOL=OFF \
#     -S hdf5-$VV -B build-hdf5 > /dev/null \
#     && cmake --build build-hdf5 -t install -j \
#     && cd /usr/local/games \
#     && rm -fr hdf5-$VV.tar.bz2 hdf5-$VV build-hdf5
# #ln -fs /usr/lib/x86_64-linux-gnu/libdl.so.2 /usr/lib/x86_64-linux-gnu/libdl.so
# #ln -fs /usr/lib/x86_64-linux-gnu/libpthread.so.0 /usr/lib/x86_64-linux-gnu/libpthread.so
# #}}}

#{{{ googletest:
RUN echo \
    && echo "## googletest:" \
    && cd /usr/local/games \
    && export VV=1.12.1 \
    && tar xf release-$VV.tar.gz \
    && rm -f release-$VV.tar.gz
#}}}

#{{{ analytical_solutions: 
RUN echo \
    && echo "## analytical_solutions + reframe:" \
    && pip install ReFrame-HPC h5py matplotlib
#}}}

# #{{{ next step: Dockerfile_2
# #}}}
